# coding=utf-8
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.


"""
@file minibatch_preprocessing.py_in

"""
import plpy
from utilities import unique_string

m4_changequote(`<!', `!>')

def minibatch_preprocessor(schema_madlib, source_table, output_table, independent_varname, dependent_varname, n_elements, encode, **kwargs):

    if not source_table or not output_table or not independent_varname\
            or not dependent_varname or not n_elements:
        plpy.error("source table cannot be null")


    uq_id = unique_string("id")
    uq_dep = unique_string("dep")
    uq_ind = unique_string("ind")
    uq_tbl = unique_string("tbl")

    sql1 = """
        CREATE TABLE {output_table} AS
        SELECT {uq_id},
            {schema_madlib}.matrix_agg({uq_ind}) as {uq_ind},
            array_agg({uq_dep}) as {uq_dep}
        FROM (
            SELECT (row_number() OVER (ORDER BY random())-1) / {n_elements}
                        as {uq_id},
                    ARRAY[{independent_varname}] as {uq_ind},
                    {dependent_varname} as {uq_dep}
            FROM
            {source_table}
        ) {uq_tbl}
        GROUP BY {uq_id}
    """.format(**locals())

    plpy.execute(sql1)


# ---------------------------------------------------------------------
