# coding=utf-8
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.


"""
@file minibatch_preprocessing.py_in

"""
import unittest
from mock import *

m4_changequote(`<!', `!>')

class MiniBatchPreProcessingTestCase(unittest.TestCase):
    def setUp(self):
        self.plpy_mock = Mock(spec='error')
        patches = {
            'plpy': self.plpy_mock,
        }
        self.plpy_mock_error = Mock(return_value=None)
        self.plpy_mock.error = self.plpy_mock_error

        self.module_patcher = patch.dict('sys.modules', patches)
        self.module_patcher.start()
        import minibatch_preprocessing
        self.subject = minibatch_preprocessing

        self.default_source_table = "source"
        self.default_output_table = "output"
        self.default_ind_var = "indvar"
        self.default_dep_var = "depvar"
        self.default_n_elements = 2
        self.default_encode = True

    def tearDown(self):
        self.module_patcher.stop()

    def test_matrix_nest_1d_to_2d_all_nulls(self):
        self.subject.matrix_nest_1d_to_2d(None, None, None, None, None, False)
        self.plpy_mock_error.assert_called_once_with("source table cannot be null")

    def test_matrix_nest_1d_to_2d_source_table_null(self):
        self.subject.matrix_nest_1d_to_2d(
            None, self.default_output_table, self.default_ind_var,
            self.default_dep_var, self.default_n_elements,
            self.default_encode)
        self.plpy_mock_error.assert_called_once_with("source table cannot be null")

    def test_matrix_nest_1d_to_2d_output_table_null(self):
        self.subject.matrix_nest_1d_to_2d(
            self.default_source_table, None, self.default_ind_var,
            self.default_dep_var, self.default_n_elements, self.default_encode)
        self.plpy_mock_error.assert_called_once_with("source table cannot be null")

    def test_matrix_nest_1d_to_2d_indvar_null(self):
        self.subject.matrix_nest_1d_to_2d(
            self.default_source_table, self.default_output_table, None,
            self.default_dep_var, self.default_n_elements, self.default_encode)
        self.plpy_mock_error.assert_called_once_with("source table cannot be null")

    def test_matrix_nest_1d_to_2d_depvar_null(self):
        self.subject.matrix_nest_1d_to_2d(
            self.default_source_table, self.default_output_table, self.default_ind_var,
            None, self.default_n_elements, self.default_encode)
        self.plpy_mock_error.assert_called_once_with("source table cannot be null")

    def test_matrix_nest_1d_to_2d_elements_null(self):
        self.subject.matrix_nest_1d_to_2d(
            self.default_source_table, self.default_output_table, self.default_ind_var,
            self.default_dep_var, None, self.default_encode)
        self.plpy_mock_error.assert_called_once_with("source table cannot be null")

if __name__ == '__main__':
    unittest.main()

# ---------------------------------------------------------------------
